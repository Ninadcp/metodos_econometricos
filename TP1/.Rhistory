#setwd("C:\\LUCA\\UdeSA\\Métodos Econométricos y Organización Industrial Aplicada\\TPs\\TP 1")
setwd("/Users/ninadicostanzopereira/Desktop/metodos_econometricos/TP1/")
library(tidyverse)
install.packages(tidyverse)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#setwd("C:\\LUCA\\UdeSA\\Métodos Econométricos y Organización Industrial Aplicada\\TPs\\TP 1")
setwd("/Users/ninadicostanzopereira/Desktop/metodos_econometricos/TP1/")
datos <- read.csv("Base de datos TP 1.csv")
ggplot(datos, aes(x = time)) +
stat_ecdf(geom = "step", color = "blue", size = 1) +
geom_vline(xintercept = 50, linetype = "dashed", color = "red") +
labs(title = "Función de Distribución Acumulada Empírica (ECDF)",
x = "Tiempo de supervivencia (días)",
y = "Probabilidad acumulada") +
theme_classic()
#Tiempo de supervivencia es 50 días
ecdf_fun <- ecdf(datos$time)
ecdf_fun(50)
install.packages("survival")
library(survival)
library(survminer) # for customizable graphs of survival function
library(broom) # for tidy output
library(ggplot2) # for graphing (actually loaded by survminer)
install.packages("survminer")
View(datos)
densidad <- density(datos$time[datos$evento == 1])
# Función que calcula S(t)
supervivientes_a_t <- function(fit, datos, t) {
S_t <- summary(fit, times = t)$surv
if (is.na(S_t)) {
tiempos_fit <- fit$time
S_vals <- fit$surv
idx <- max(which(tiempos_fit <= t))
S_t <- S_vals[idx]
}
# Identificar quiénes sobreviven más allá de t
vivos <- datos[datos$time > t, ]
# Mostrar resultados
cat("Probabilidad estimada de supervivencia en t =", t, ":", S_t, "\n")
cat("Número de individuos que sobrevivieron más allá de t:", nrow(vivos), "\n")
return(list(probabilidad = S_t, sobrevivientes = vivos))
}
# Crear el objeto survfit (si aún no lo hiciste)
fit <- survfit(Surv(time, evento) ~ 1, data = datos)
# Aplicar la función
resultado <- supervivientes_a_t(fit, datos, t = 10)
fit <- survfit(Surv(time, evento) ~ 1, data = datos)
datos$evento <- 1
View(datos)
t_values <- 0:212
densidad <- numeric(length(t_values))
# Loop para calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - F_emp(t)
}
t_values <- 0:212
densidad <- numeric(length(t_values))
# Loop para calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
}
# Graficamos
plot(t_vals, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad (complemento ECDF)")
t_values <- 0:212
densidad <- numeric(length(t_values))
# Calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
}
# Graficamos
plot(t_values, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad (complemento ECDF)")
t_values <- 0:212
densidad <- numeric(length(t_values))
# Calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
}
# Graficamos
plot(t_values, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad????")
t_values <- 0:21
densidad <- numeric(length(t_values))
# Calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
}
# Graficamos
plot(t_values, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad????")
n <- length(datos$time)
t_values <- 0:212
densidad <- numeric(length(t_values))
# Calcular 1 - ECDF(t)
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
}
# Graficamos
plot(t_values, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad????")
View(datos)
# Graficamos
plot(t_values, densidad, type = "l", col = "blue",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad")
# Graficamos
plot(t_values, densidad, type = "l", col = "pink",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad")
# t en 0:212
t_values <- 0:212
n <- length(mis_datos)  # tamaño muestral
# Extraer vector de tiempos desde la matriz 'datos'
tiempos <- datos[, 1]
ecdf_fun <- ecdf(tiempos)  # Función de distribución empírica
# Valores de t
t_values <- 0:212
n <- length(tiempos)       # Tamaño muestral
z_alpha <- qnorm(0.975)    # Cuantil normal para IC del 95%
# Inicializar vectores
densidad <- numeric(length(t_values))
ic_upper <- numeric(length(t_values))
ic_lower <- numeric(length(t_values))
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
F_t <- ecdf_fun(t)
S_t <- 1 - F_t
densidad[i] <- S_t
se <- sqrt(S_t * (1 - S_t) / n)  # Error estándar
ic_upper[i] <- min(1, S_t + z_alpha * se)
ic_lower[i] <- max(0, S_t - z_alpha * se)
}
# Graficar
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
# Agregar líneas de intervalo de confianza
lines(t_values, ic_upper, col = "grey", lty = 2)
lines(t_values, ic_lower, col = "grey", lty = 2)
range(datos[,1])
summary(datos[,1])
plot(t_values, ic_upper - ic_lower, type = "l", col = "darkred",
xlab = "t", ylab = "Ancho del IC", main = "Ancho del IC del 95%")
# Valores de t
t_values <- 0:212
n <- 10000z_alpha <- qnorm(0.975)    # uso los cuantiles de una normal para IC del 95%
# Valores de t
t_values <- 0:212
n <- 10000
z_alpha <- qnorm(0.975)    # uso los cuantiles de una normal para IC del 95%
# Valores de t, n y z_alpha
t_values <- 0:212
n <- 10000
z_alpha <- qnorm(0.975) # uso los cuantiles de una normal para IC del 95%
densidad <- numeric(length(t_values))
ic_upper <- numeric(length(t_values))
ic_lower <- numeric(length(t_values))
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
F_t <- ecdf_fun(t) #esta es la función q definimos antes Diego
S_t <- 1 - F_t
densidad[i] <- S_t
#y acá arrancan mis dudas ..........
se <- sqrt(S_t * (1 - S_t) / n)  # Error
# Graficar
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
#y acá arrancan mis dudas ..........
se <- sqrt(densidad[i] * (1 - densidad[i]) / n) # Error
ic_upper[i] <- min(1, densidad[i] + z_alpha * se)
ic_lower[i] <- max(0, densidad[i] - z_alpha * se)
}
# Graficar
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
#y acá arrancan mis dudas ..........
# se <- sqrt(densidad[i] * (1 - densidad[i]) / n) # Error
# ic_upper[i] <- min(1, densidad[i] + z_alpha * se)
$ ic_lower[i] <- max(0, densidad[i] - z_alpha * se)
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
#y acá arrancan mis dudas ..........
# se <- sqrt(densidad[i] * (1 - densidad[i]) / n) # Error
# ic_upper[i] <- min(1, densidad[i] + z_alpha * se)
# ic_lower[i] <- max(0, densidad[i] - z_alpha * se)
}
# Graficar
plot(t_values, densidad, type = "l", col = "pink", lwd = 2,
ylim = c(0, 1),
xlab = "t", ylab = "1 - ECDF(t)",
main = "Función de densidad con IC del 95%")
plot(t_values, densidad, type = "l", col = "pink",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad")
# Graficar
plot(t_values, densidad, type = "l", col = "pink",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad")
# Calcular 1 - ECDF(t) y sus intervalos de confianza
for (i in seq_along(t_values)) {
t <- t_values[i]
densidad[i] <- 1 - ecdf_fun(t)
#y acá arrancan mis dudas ..........
# se <- sqrt(densidad[i] * (1 - densidad[i]) / n) # Error
# ic_upper[i] <- min(1, densidad[i] + z_alpha * se)
# ic_lower[i] <- max(0, densidad[i] - z_alpha * se)
}
# Graficar
plot(t_values, densidad, type = "l", col = "pink",
xlab = "t", ylab = "1 - ECDF(t)", main = "Función de densidad")
densidad <- numeric(length(t_values))
ic_upper <- numeric(length(t_values))
ic_lower <- numeric(length(t_values))
